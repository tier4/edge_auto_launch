<?xml version="1.0" encoding="UTF-8"?>
<launch>
  <let name="parent_frame" value="lidar"/>

  <arg name="camera_name"/>
  <arg name="rviz" default="true"/>

  <!-- we do not use the standard image_raw name to avoid naming conflicts -->
  <let name="image_decompressed_topic" value="/sensing/camera/$(var camera_name)/image_raw"/>
  <let name="image_compressed_topic" value="/sensing/camera/$(var camera_name)/image_raw/compressed"/>
  <let name="camera_info_topic" value="/sensing/camera/$(var camera_name)/camera_info"/>
  <let name="pointcloud_topic" value="/aw_points"/>
  <let name="camera_frame" value="$(var camera_name)/camera_link"/>
  
  <let name="rviz_profile" value=""/>
  <let name="rviz_profile" value="$(find-pkg-share extrinsic_calibration_manager)/rviz/tag_calib_camera0_aw_points.rviz" if="$(eval &quot;'$(var camera_name)' == 'camera0' &quot;)"/>
  <let name="rviz_profile" value="$(find-pkg-share extrinsic_calibration_manager)/rviz/tag_calib_camera1_aw_points.rviz" if="$(eval &quot;'$(var camera_name)' == 'camera1' &quot;)"/>

  <let name="lidar_model" value="at128"/>

  <!-- image decompressor -->
  <node pkg="image_transport_decompressor" exec="image_transport_decompressor_node" name="decompressor" output="screen">
    <remap from="decompressor/input/compressed_image" to="$(var image_compressed_topic)"/>
    <remap from="decompressor/output/raw_image" to="$(var image_decompressed_topic)"/>
  </node>

  <!-- tag based calibrator -->
  <include file="$(find-pkg-share extrinsic_tag_based_calibrator)/launch/calibrator.launch.xml">
    <arg name="ns" value="$(var parent_frame)/$(var camera_name)/camera_link"/>
    <arg name="parent_frame" value="$(var parent_frame)"/>
    <arg name="child_frame" value="$(var camera_frame)"/>
    <arg name="image_topic" value="$(var image_decompressed_topic)"/>
    <arg name="camera_info_topic" value="$(var camera_info_topic)"/>
    <arg name="pointcloud_topic" value="$(var pointcloud_topic)"/>
    <arg name="pointcloud_topic_ex" value="$(var camera_info_topic)"/>
    <arg name="lidar_model" value="$(var lidar_model)"/>
  </include>

  <!--KL comment: this tf broadcast should be done elsewhere-->
  <node
    pkg="tf2_ros"
    exec="static_transform_publisher"
    name="estimated_base_link_broadcaster"
    output="screen"
    args="--x 0.0 --y 0.0 --z 0.0 --qx 0.5 --qy -0.5 --qz 0.5 --qw -0.5 --frame-id base_link --child-frame-id lidar"
  />

  <node
    pkg="tf2_ros"
    exec="static_transform_publisher"
    name="estimated_base_link_broadcaster"
    output="screen"
    args="--x 0.0 --y 0.0 --z 0.0 --qx 0.5 --qy -0.5 --qz 0.5 --qw -0.5 --frame-id camera0/camera_link --child-frame-id camera0/camera_optical_link"
  />

  <node
    pkg="tf2_ros"
    exec="static_transform_publisher"
    name="estimated_base_link_broadcaster"
    output="screen"
    args="--x 0.0 --y 0.0 --z 0.0 --qx 0.5 --qy -0.5 --qz 0.5 --qw -0.5 --frame-id camera1/camera_link --child-frame-id camera1/camera_optical_link"
  />

  <node
    pkg="tf2_ros"
    exec="static_transform_publisher"
    name="estimated_base_link_broadcaster"
    output="screen"
    args="--x 0.0 --y 0.0 --z 0.0 --qx 0.0 --qy 0.0 --qz 0.0 --qw 1.0 --frame-id lidar --child-frame-id camera0/camera_link"
  />

  <node
    pkg="tf2_ros"
    exec="static_transform_publisher"
    name="estimated_base_link_broadcaster"
    output="screen"
    args="--x 0.0 --y 0.0 --z 0.0 --qx 0.0 --qy 0.0 --qz 0.0 --qw 1.0 --frame-id lidar --child-frame-id camera1/camera_link"
  />




  <!-- interactive calibrator -->
  <group>
    <push-ros-namespace namespace="$(var parent_frame)/$(var camera_frame)"/>

    <node pkg="extrinsic_interactive_calibrator" exec="interactive_calibrator" name="interactive_calibrator" output="screen">
      <remap from="pointcloud" to="$(var pointcloud_topic)"/>
      <remap from="image" to="$(var image_compressed_topic)"/>
      <remap from="camera_info" to="$(var camera_info_topic)"/>
      <remap from="calibration_points_input" to="calibration_points"/>

      <param name="camera_parent_frame" value="$(var parent_frame)"/>
      <param name="camera_frame" value="$(var camera_frame)"/>
      <param name="use_calibration_api" value="false"/>
      <param name="can_publish_tf" value="false"/>
    </node>

    <include file="$(find-pkg-share intrinsic_camera_calibration)/launch/optimizer.launch.xml"/>
    <node pkg="rviz2" exec="rviz2" name="rviz2" output="screen" args="-d $(var rviz_profile)" if="$(var rviz)"/>
  </group>
</launch>
